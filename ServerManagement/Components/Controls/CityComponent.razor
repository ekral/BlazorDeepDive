@implements IDisposable
@inject IMessenger Messenger
@if (City is not null)
{
    <div class="col">
        <div class="card @(City.Name.Equals(SelectedCityName, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")">
            <img src=@($"/images/{City.Name}.png") class="card-img-top" alt="Calgary">
            <div class="card-body">
                <button type="button" class="btn btn-outline-primary" @onclick="@(() => SelectCity(City.Name))"> @City.Name</button>
                <div>
                    <text>@City.NumberOfServers</text>
                </div>
            </div>

        </div>
       
    </div>
}

@code {
    [Parameter]
    public City? City { get; set; } 

    [Parameter]
    public string SelectedCityName { get; set; } = "Toronto";

    [Parameter]
    public EventCallback<string> SelectCityCallback { get; set; }

    private void SelectCity(string cityName)
    {
        SelectCityCallback.InvokeAsync(cityName);
    }

    public CityComponent()
    {
        WeakReferenceMessenger.Default.Register<ChangeMessage>(this, async (r, m) =>
        {
            if(City is null)
            {
                return;
            }

            if (m.CityName.Equals(City.Name, StringComparison.OrdinalIgnoreCase))
            {
                City.NumberOfServers += m.Change;

                await base.InvokeAsync(StateHasChanged);
            }
        });

       

        Console.WriteLine("City: Constructor");
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("City: OnInitialized");

        base.OnInitialized();
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("City: ShouldRender");

        return base.ShouldRender();

    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine("City: SetParametersAsync");

        return base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("City: OnParametersSet");

        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("City: OnAfterRender");

        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("City: Dispose");

    }
}
