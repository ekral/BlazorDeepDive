@page "/servers"
@inject IServersRepository ServersRepository
@inject ICitiesRepository CitiesRepository
@inject NavigationManager NavigationManager

<h3>Servers</h3>


<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (string city in cities)
        {
            <div class="col">
                <div class="card">
                    <img src=@($"/images/{city}.png") class="card-img-top" alt="Calgary"  >
                    <div class="card-body">
                        <button type="button" class="btn btn-outline-primary"> @city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<br/>
<ServerComponent @rendermode="InteractiveServer" />
<br/>

<ul>
    @foreach (Server server in servers)
    {
        <li>
            @server.Name in @server.City is <span style="color: @(server.IsOnline ? "green" : "red")">@(server.IsOnline ? "online" : "offline")</span>
            &nbsp;
            <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm 
                Model="server"  
                FormName="@($"form-server-{server.ServerId}")" 
                OnValidSubmit="@(() => DeleteServer(server.ServerId))">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </li>
    }
</ul>

<br/>

<a href="/servers/add" class="btn btn-primary">Add server</a>

@code {
    private List<Server> servers = new();
    private List<string> cities = new();

    public Servers()
    {

    }
    protected override void OnInitialized()
    {
        servers = ServersRepository.GetServersByCity("Toronto");
        cities = CitiesRepository.GetCities();
    }

    public void DeleteServer(int serverId)
    {
        ArgumentOutOfRangeException.ThrowIfLessThanOrEqual(serverId, 0);

        ServersRepository.DeleteServer(serverId);

        servers = ServersRepository.GetServersByCity("Toronto");
    }
}
